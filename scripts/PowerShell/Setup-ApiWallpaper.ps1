# ===================================================================
# PowerShell Script to Setup API Wallpaper
# Function: Guides user for API URL and refresh interval, then creates a scheduled task.
# ===================================================================

# --- 1. Welcome ---
Clear-Host
Write-Host "=============================================" -ForegroundColor Green
Write-Host "  Welcome to the API Wallpaper Setup Script!" -ForegroundColor Green
Write-Host "============================================="
Write-Host "This script will help you with the following:"
Write-Host "  1. Create a PowerShell script to download and set the wallpaper."
Write-Host "  2. Create a Windows Scheduled Task to run the script periodically."
Write-Host ""

# --- 2. User Input ---
# Get API URL
$defaultApiUrl = "https://random.sqmn.eu.org"
$apiUrl = ""
while ($true) {
    $userInput = Read-Host "> Enter API URL (or press Enter for default)"
    if ([string]::IsNullOrWhiteSpace($userInput)) {
        $apiUrl = $defaultApiUrl
        Write-Host "  Using default URL: $apiUrl"
        break
    }
    if ($userInput -like "http*") {
        $apiUrl = $userInput
        break
    }
    Write-Warning "Invalid URL format. Please enter a valid URL starting with http or https."
}

# Get refresh interval
$defaultInterval = 10
$intervalMinutes = 0
while ($true) {
    $userInput = Read-Host "> Enter refresh interval in minutes (or press Enter for default: $defaultInterval)"
    if ([string]::IsNullOrWhiteSpace($userInput)) {
        $intervalMinutes = $defaultInterval
        Write-Host "  Using default interval: $intervalMinutes minutes"
        break
    }
    try {
        $intervalMinutes = [int]$userInput
        if ($intervalMinutes -gt 0) {
            break
        }
        else {
            Write-Warning "Please enter an integer greater than 0."
        }
    }
    catch {
        Write-Warning "Invalid input. Please enter a number."
    }
}

Write-Host ""
Write-Host "Configuration Summary:" -ForegroundColor Cyan
Write-Host "  API URL: $apiUrl"
Write-Host "  Refresh Interval: $intervalMinutes minutes"
Write-Host ""

# --- 3. Define Paths and Script Content ---
$scriptDirectory = "$env:USERPROFILE\Documents\AutoApiWallpaper"
if (-not (Test-Path $scriptDirectory)) {
    New-Item -ItemType Directory -Path $scriptDirectory | Out-Null
}

$wallpaperScriptPath = Join-Path $scriptDirectory "Set-ApiWallpaper.ps1"
$vbsWrapperPath = Join-Path $scriptDirectory "Run-Silent.vbs"
$imagePath = Join-Path $scriptDirectory "api_wallpaper.jpg"

# Build the content for the child script using the -f format operator.
$wallpaperScriptContent = @"
# Wallpaper Setting Script - Generated by Setup-ApiWallpaper.ps1

`$ErrorActionPreference = 'Stop'

Add-Type -TypeDefinition @'
using System;
using System.Runtime.InteropServices;

public class WallpaperHelper {{
    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int SystemParametersInfo(uint uAction, uint uParam, string lpvParam, uint fuWinIni);

    public const uint SPI_SETDESKWALLPAPER = 0x0014;
    public const uint SPIF_UPDATEINIFILE = 0x01;
    public const uint SPIF_SENDCHANGE = 0x02;

    public static bool SetWallpaper(string path) {{
        int result = SystemParametersInfo(SPI_SETDESKWALLPAPER, 0, path, SPIF_UPDATEINIFILE | SPIF_SENDCHANGE);
        return result != 0;
    }}
}}
'@ -ErrorAction SilentlyContinue

`$logPath = Join-Path (Split-Path `$MyInvocation.MyCommand.Path) "wallpaper.log"

try {{
    `$timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
    Add-Content -Path `$logPath -Value "`$timestamp - Starting wallpaper update..." -Encoding UTF8

    # Download image from API with User-Agent to avoid 403
    `$headers = @{{
        'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    }}
    Invoke-WebRequest -Uri "{0}" -OutFile "{1}" -UseBasicParsing -Headers `$headers
    Add-Content -Path `$logPath -Value "`$timestamp - Image downloaded successfully" -Encoding UTF8

    # Verify file exists and is valid
    if (-not (Test-Path "{1}")) {{
        throw "Downloaded file not found"
    }}

    `$fileSize = (Get-Item "{1}").Length
    if (`$fileSize -lt 1024) {{
        throw "Downloaded file too small (possibly corrupt): `$fileSize bytes"
    }}
    Add-Content -Path `$logPath -Value "`$timestamp - File verified: `$fileSize bytes" -Encoding UTF8

    # Set wallpaper style in registry
    Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name WallpaperStyle -Value "10"
    Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name TileWallpaper -Value "0"
    Add-Content -Path `$logPath -Value "`$timestamp - Registry updated" -Encoding UTF8

    # Apply wallpaper using Windows API
    `$result = [WallpaperHelper]::SetWallpaper("{1}")
    Add-Content -Path `$logPath -Value "`$timestamp - SetWallpaper API result: `$result" -Encoding UTF8

    # Force refresh using rundll32
    Start-Process -FilePath "rundll32.exe" -ArgumentList "user32.dll,UpdatePerUserSystemParameters" -Wait -WindowStyle Hidden
    Add-Content -Path `$logPath -Value "`$timestamp - Wallpaper update completed" -Encoding UTF8
}}
catch {{
    `$errorMessage = "`$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - ERROR: `$(`$_.Exception.Message)"
    Add-Content -Path `$logPath -Value `$errorMessage -Encoding UTF8
}}
"@ -f $apiUrl, $imagePath

# Write the child script to a file
Set-Content -Path $wallpaperScriptPath -Value $wallpaperScriptContent -Encoding UTF8

# Create VBScript wrapper to run PowerShell silently (no window)
$vbsContent = @"
Set objShell = CreateObject("WScript.Shell")
objShell.Run "powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -File ""$wallpaperScriptPath""", 0, False
"@
Set-Content -Path $vbsWrapperPath -Value $vbsContent -Encoding ASCII

Write-Host "Successfully created wallpaper script: $wallpaperScriptPath" -ForegroundColor Green
Write-Host "Successfully created silent wrapper: $vbsWrapperPath" -ForegroundColor Green

# --- 4. Create Windows Scheduled Task ---
$taskName = "Auto API Wallpaper Changer"
$taskDescription = "Fetches a new image from API and sets it as wallpaper every $intervalMinutes minutes."

# Use VBScript wrapper to run completely silently (no window at all)
$action = New-ScheduledTaskAction -Execute "wscript.exe" -Argument "`"$vbsWrapperPath`""
$trigger = New-ScheduledTaskTrigger -Once -At (Get-Date).AddMinutes(1) -RepetitionInterval (New-TimeSpan -Minutes $intervalMinutes) -RepetitionDuration (New-TimeSpan -Days 9999)
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -ExecutionTimeLimit (New-TimeSpan -Minutes 5) -MultipleInstances IgnoreNew

# Check for and remove old task to prevent duplicates
if (Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue) {
    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
    Write-Host "  Old task found and updated." -ForegroundColor Yellow
}

# Register the task
Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Settings $settings -Description $taskDescription -User $env:USERNAME | Out-Null

Write-Host "Successfully created Windows Scheduled Task: '$taskName'" -ForegroundColor Green
Write-Host ""
Write-Host "All done! The wallpaper will change for the first time in about a minute."
Write-Host "To modify or remove, open 'Task Scheduler' and find '$taskName'."
Write-Host ""
Read-Host "Press Enter to exit..."
