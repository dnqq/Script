# ===================================================================
# PowerShell Script to Setup API Wallpaper
# Function: Guides user for API URL and refresh interval, then creates a scheduled task.
# ===================================================================

# --- 1. Welcome ---
Clear-Host
Write-Host "=============================================" -ForegroundColor Green
Write-Host "  Welcome to the API Wallpaper Setup Script!" -ForegroundColor Green
Write-Host "============================================="
Write-Host "This script will help you with the following:"
Write-Host "  1. Create a PowerShell script to download and set the wallpaper."
Write-Host "  2. Create a Windows Scheduled Task to run the script periodically."
Write-Host ""

# --- 2. User Input ---
# Get API URL
$defaultApiUrl = "https://api.sqmn.eu.org/wallpaper/random"
$apiUrl = ""
while ($true) {
    $userInput = Read-Host "> Enter API URL (or press Enter for default)"
    if ([string]::IsNullOrWhiteSpace($userInput)) {
        $apiUrl = $defaultApiUrl
        Write-Host "  Using default URL: $apiUrl"
        break
    }
    if ($userInput -like "http*") {
        $apiUrl = $userInput
        break
    }
    Write-Warning "Invalid URL format. Please enter a valid URL starting with http or https."
}

# Get refresh interval
$defaultInterval = 10
$intervalMinutes = 0
while ($true) {
    $userInput = Read-Host "> Enter refresh interval in minutes (or press Enter for default: $defaultInterval)"
    if ([string]::IsNullOrWhiteSpace($userInput)) {
        $intervalMinutes = $defaultInterval
        Write-Host "  Using default interval: $intervalMinutes minutes"
        break
    }
    try {
        $intervalMinutes = [int]$userInput
        if ($intervalMinutes -gt 0) {
            break
        }
        else {
            Write-Warning "Please enter an integer greater than 0."
        }
    }
    catch {
        Write-Warning "Invalid input. Please enter a number."
    }
}

Write-Host ""
Write-Host "Configuration Summary:" -ForegroundColor Cyan
Write-Host "  API URL: $apiUrl"
Write-Host "  Refresh Interval: $intervalMinutes minutes"
Write-Host ""

# --- 3. Define Paths and Script Content ---
$scriptDirectory = "$env:USERPROFILE\Documents\AutoApiWallpaper"
if (-not (Test-Path $scriptDirectory)) {
    New-Item -ItemType Directory -Path $scriptDirectory | Out-Null
}

$wallpaperScriptPath = Join-Path $scriptDirectory "Set-ApiWallpaper.ps1"
$imagePath = Join-Path $scriptDirectory "api_wallpaper.jpg"

# C# code for forcing the desktop to refresh.
$csharpCode = @'
using System.Runtime.InteropServices;
using System.ComponentModel;

public class Desktop {
    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);

    public static void Refresh() {
        // Calling with an empty path forces a reread from the registry.
        // The '3' flag ensures the change is broadcast to all windows.
        int result = SystemParametersInfo(20, 0, "", 3);
        if (result == 0) {
            throw new Win32Exception(Marshal.GetLastWin32Error());
        }
    }
}
'@

# Build the content for the child script using the -f format operator.
$wallpaperScriptContent = @"
# Wallpaper Setting Script - Generated by Setup-ApiWallpaper.ps1

try {{
    # Download image from API
    Invoke-WebRequest -Uri "{0}" -OutFile "{1}" -UseBasicParsing

    # Set wallpaper path in the registry
    Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name Wallpaper -Value "{1}"
    # Set fit style to 'Stretch' (2). Other options: Fill (10), Fit (6), Tile (0), Center (0)
    Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name WallpaperStyle -Value "2"
    Set-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name TileWallpaper -Value "0"

    # Force the desktop to refresh and apply the new wallpaper
    \$code = @'
{2}
'@
    Add-Type -TypeDefinition \$code
    [Desktop]::Refresh()
}}
catch {{
    # Log the error to a file for debugging
    $errorLogPath = Join-Path (Split-Path $MyInvocation.MyCommand.Path) "error.log"
    $errorMessage = "$(Get-Date): $($_.Exception.Message)"
    Add-Content -Path $errorLogPath -Value $errorMessage
}}
"@ -f $apiUrl, $imagePath, $csharpCode

# Write the child script to a file
Set-Content -Path $wallpaperScriptPath -Value $wallpaperScriptContent -Encoding UTF8

Write-Host "Successfully created wallpaper script: $wallpaperScriptPath" -ForegroundColor Green

# --- 4. Create Windows Scheduled Task ---
$taskName = "Auto API Wallpaper Changer"
$taskDescription = "Fetches a new image from API and sets it as wallpaper every $intervalMinutes minutes."
$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -NoProfile -Command `"Get-Content -Path '$($wallpaperScriptPath)' | Invoke-Expression`""
$trigger = New-ScheduledTaskTrigger -Once -At ((Get-Date).AddMinutes(1)) -RepetitionInterval (New-TimeSpan -Minutes $intervalMinutes)
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -ExecutionTimeLimit (New-TimeSpan -Minutes 5)

# Check for and remove old task to prevent duplicates
if (Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue) {
    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
    Write-Host "  Old task found and updated." -ForegroundColor Yellow
}

Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Settings $settings -Description $taskDescription -User $env:USERNAME

Write-Host "Successfully created Windows Scheduled Task: '$taskName'" -ForegroundColor Green
Write-Host ""
Write-Host "All done! The wallpaper will change for the first time in about a minute."
Write-Host "To modify or remove, open 'Task Scheduler' and find '$taskName'."
Write-Host ""
Read-Host "Press Enter to exit..."
